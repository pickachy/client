# This is a basic workflow to help you get started with Actions

name: Auto build and deploy application

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Start BUILDX for caching layers
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      # Enable docker layers caching
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Build the app and store layers caches in above paths
      - name: Build application
        run: docker buildx build -t pickachy/client --cache-from="type=local,src=/tmp/.buildx-cache" --cache-to="type=local,dest=/tmp/.buildx-cache-new" --load .

      # Delete old layers cache
      - name: Update Docker layers cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Compress and Save image
        run: docker save pickachy/client | gzip > client.tgz

      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/production.key
          chmod 600 ~/.ssh/production.key
          cat >>~/.ssh/config <<END
          Host production
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/production.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Copy image to VPS
        run: scp client.tgz production:~

      - name: Wait for api deployed
        run: |
          SLEEP_INTERVAL=15
          while true; do
              TOTAL_COUNT=$(
              curl \
                  -u $OWNER:$WORKFLOW_PAT_TOKEN \
                  --silent \
                  --location \
                  --request GET \
                  --header 'Accept: application/vnd.github.everest-preview+json' \
                  --header 'Content-Type: application/json' \
                  --header 'cache-control: no-cache' \
                  "https://api.github.com/repos/$API_REPO_PATH/actions/workflows/build-and-deploy.yml/runs?status=in_progress" | grep -oP -- '"total_count": \K[0-9]{1,4}')

              if [ $TOTAL_COUNT == 0 ]; then
                  echo "API is finished"
                  break;
              fi
              echo "API is not finished yet"
              sleep $SLEEP_INTERVAL
          done
        env:
          WORKFLOW_PAT_TOKEN: ${{ secrets.WORKFLOW_PAT_TOKEN }}
          OWNER: ${{ secrets.OWNER }}
          API_REPO_PATH: ${{ secrets.API_REPO_PATH }}

      - name: Deploy
        run: |
          ssh production /bin/bash -s << EOT
          cd ~
          if [ ! -d ./deploy ]
          then
          git clone ${{ secrets.DEPLOY_REPO_CLONE_URL }}
          cd ./deploy
          else
          cd ./deploy
          git fetch && git reset --hard origin/main
          fi
          gunzip -c ~/client.tgz | docker load
          docker-compose up --no-deps -d client
          rm -f ~/client.tgz
          EOT
